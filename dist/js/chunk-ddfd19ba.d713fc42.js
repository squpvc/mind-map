(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-ddfd19ba"],{"7bfb":function(e,t,i){"use strict";var n=i("d17d"),o=i("35e0"),s=i("6ac9"),a=i("1f66");class r extends o["a"]{constructor({mindMap:e}){super(e.renderer),this.mindMap=e,this.autoMove=new a["a"](e),this.reset(),this.bindEvent()}reset(){this.isDragging=!1,this.mousedownNode=null,this.beingDragNodeList=[],this.nodeList=[],this.overlapNode=null,this.prevNode=null,this.nextNode=null,this.drawTransform=null,this.clone=null,this.placeholder=null,this.placeholderWidth=50,this.placeholderHeight=10,this.placeHolderLine=null,this.placeHolderExtraLines=[],this.offsetX=0,this.offsetY=0,this.isMousedown=!1,this.mouseDownX=0,this.mouseDownY=0,this.mouseMoveX=0,this.mouseMoveY=0,this.checkDragOffset=10,this.minOffset=10}bindEvent(){this.onNodeMousedown=this.onNodeMousedown.bind(this),this.onMousemove=this.onMousemove.bind(this),this.onMouseup=this.onMouseup.bind(this),this.checkOverlapNode=Object(n["wb"])(this.checkOverlapNode,300,this),this.mindMap.on("node_mousedown",this.onNodeMousedown),this.mindMap.on("mousemove",this.onMousemove),this.mindMap.on("node_mouseup",this.onMouseup),this.mindMap.on("mouseup",this.onMouseup)}unBindEvent(){this.mindMap.off("node_mousedown",this.onNodeMousedown),this.mindMap.off("mousemove",this.onMousemove),this.mindMap.off("node_mouseup",this.onMouseup),this.mindMap.off("mouseup",this.onMouseup)}onNodeMousedown(e,t){if(this.mindMap.opt.readonly||1!==t.which||e.isGeneralization||e.isRoot)return;this.isMousedown=!0,this.mousedownNode=e;const{x:i,y:n}=this.mindMap.toPos(t.clientX,t.clientY);this.mouseDownX=i,this.mouseDownY=n}onMousemove(e){if(this.mindMap.opt.readonly||!this.isMousedown)return;e.preventDefault();const{x:t,y:i}=this.mindMap.toPos(e.clientX,e.clientY);this.mouseMoveX=t,this.mouseMoveY=i,!this.isDragging&&Math.abs(t-this.mouseDownX)<=this.checkDragOffset&&Math.abs(i-this.mouseDownY)<=this.checkDragOffset||(this.mindMap.emit("node_dragging",this.mousedownNode),this.handleStartMove(),this.onMove(t,i,e))}async onMouseup(e){if(!this.isMousedown)return;const{autoMoveWhenMouseInEdgeOnDrag:t,enableFreeDrag:i,beforeDragEnd:n}=this.mindMap.opt;t&&this.mindMap.select&&this.autoMove.clearAutoMoveTimer(),this.isMousedown=!1,this.beingDragNodeList.forEach(e=>{e.setOpacity(1),e.showChildren(),e.endDrag()}),this.removeCloneNode();let o=this.overlapNode?this.overlapNode.getData("uid"):"",s=this.prevNode?this.prevNode.getData("uid"):"",a=this.nextNode?this.nextNode.getData("uid"):"";if(this.isDragging&&"function"===typeof n){const e=await n({overlapNodeUid:o,prevNodeUid:s,nextNodeUid:a,beingDragNodeList:[...this.beingDragNodeList]});if(e)return void this.reset()}if(this.overlapNode)this.removeNodeActive(this.overlapNode),this.mindMap.execCommand("MOVE_NODE_TO",this.beingDragNodeList,this.overlapNode);else if(this.prevNode)this.removeNodeActive(this.prevNode),this.mindMap.execCommand("INSERT_AFTER",this.beingDragNodeList,this.prevNode);else if(this.nextNode)this.removeNodeActive(this.nextNode),this.mindMap.execCommand("INSERT_BEFORE",this.beingDragNodeList,this.nextNode);else if(this.clone&&i&&1===this.beingDragNodeList.length){let{x:t,y:i}=this.mindMap.toPos(e.clientX-this.offsetX,e.clientY-this.offsetY),{scaleX:n,scaleY:o,translateX:s,translateY:a}=this.drawTransform;t=(t-s)/n,i=(i-a)/o,this.mousedownNode.left=t,this.mousedownNode.top=i,this.mousedownNode.customLeft=t,this.mousedownNode.customTop=i,this.mindMap.execCommand("SET_NODE_CUSTOM_POSITION",this.mousedownNode,t,i),this.mindMap.render()}this.isDragging&&this.mindMap.emit("node_dragend",{overlapNodeUid:o,prevNodeUid:s,nextNodeUid:a}),this.reset()}removeNodeActive(e){e.getData("isActive")&&this.mindMap.execCommand("SET_NODE_ACTIVE",e,!1)}onMove(e,t,i){if(!this.isMousedown||!this.isDragging)return;let{scaleX:n,scaleY:o,translateX:s,translateY:a}=this.drawTransform,r=e-this.offsetX,h=t-this.offsetY;e=(r-s)/n,t=(h-a)/o;let d=this.clone.transform();this.clone.translate(e-d.translateX,t-d.translateY),this.checkOverlapNode(),this.drawTransform=this.mindMap.draw.transform(),this.autoMove.clearAutoMoveTimer(),this.autoMove.onMove(i.clientX,i.clientY)}async handleStartMove(){if(!this.isDragging){let e=this.mousedownNode;this.drawTransform=this.mindMap.draw.transform();let{scaleX:t,scaleY:i,translateX:o,translateY:s}=this.drawTransform;this.offsetX=this.mouseDownX-(e.left*t+o),this.offsetY=this.mouseDownY-(e.top*i+s),e.getData("isActive")?this.beingDragNodeList=Object(n["ub"])(Object(n["P"])(this.mindMap.renderer.activeNodeList.filter(e=>!e.isRoot&&!e.isGeneralization))):this.beingDragNodeList=[e];const{beforeDragStart:a}=this.mindMap.opt;if("function"===typeof a){const e=await a([...this.beingDragNodeList]);if(e)return}this.nodeTreeToList(),this.createCloneNode(),this.mindMap.execCommand("CLEAR_ACTIVE_NODE"),this.isDragging=!0}}nodeTreeToList(){const e=[];Object(n["d"])(this.mindMap.renderer.root,t=>{this.checkIsInBeingDragNodeList(t)||(e[t.layerIndex]||(e[t.layerIndex]=[]),e[t.layerIndex].push(t))}),this.nodeList=e.reduceRight((e,t)=>[...e,...t],[])}createCloneNode(){if(!this.clone){const{dragMultiNodeRectConfig:e,dragPlaceholderRectFill:t,dragPlaceholderLineConfig:i,dragOpacityConfig:n,handleDragCloneNode:o}=this.mindMap.opt,{width:s,height:a,fill:r}=e,h=this.beingDragNodeList[0],d=h.style.merge("lineColor",!0);if(this.beingDragNodeList.length>1)this.clone=this.mindMap.otherDraw.rect().size(s,a).radius(a/2).fill({color:r||d}),this.offsetX=s/2,this.offsetY=a/2;else{this.clone=h.group.clone();const e=this.clone.findOne(".smm-expand-btn");e&&e.remove(),this.mindMap.otherDraw.add(this.clone),"function"===typeof o&&o(this.clone)}this.clone.opacity(n.cloneNodeOpacity),this.clone.css("z-index",99999),this.placeholder=this.mindMap.otherDraw.rect().fill({color:t||d}).radius(5),this.placeHolderLine=this.mindMap.otherDraw.path().stroke({color:i.color||d,width:i.width}).fill({color:"none"}),this.beingDragNodeList.forEach(e=>{e.setOpacity(n.beingDragNodeOpacity),e.hideChildren(),e.startDrag()})}}removeCloneNode(){this.clone&&(this.clone.remove(),this.placeholder.remove(),this.placeHolderLine.remove(),this.removeExtraLines())}removeExtraLines(){this.placeHolderExtraLines.forEach(e=>{e.remove()}),this.placeHolderExtraLines=[]}checkOverlapNode(){if(!this.drawTransform||!this.placeholder)return;const{LOGICAL_STRUCTURE:e,LOGICAL_STRUCTURE_LEFT:t,MIND_MAP:i,ORGANIZATION_STRUCTURE:n,CATALOG_ORGANIZATION:o,TIMELINE:a,TIMELINE2:r,VERTICAL_TIMELINE:h,VERTICAL_TIMELINE2:d,VERTICAL_TIMELINE3:l,FISHBONE:c,FISHBONE2:p,RIGHT_FISHBONE:g,RIGHT_FISHBONE2:m}=s["a"].LAYOUT;this.overlapNode=null,this.prevNode=null,this.nextNode=null,this.placeholder.size(0,0),this.placeHolderLine.hide(),this.removeExtraLines(),this.nodeList.forEach(s=>{if(s.getData("isActive")&&this.mindMap.execCommand("SET_NODE_ACTIVE",s,!1),!(this.overlapNode||this.prevNode&&this.nextNode))switch(this.mindMap.opt.layout){case e:case t:this.handleLogicalStructure(s);break;case i:this.handleMindMap(s);break;case n:this.handleOrganizationStructure(s);break;case o:this.handleCatalogOrganization(s);break;case a:this.handleTimeLine(s);break;case r:this.handleTimeLine2(s);break;case h:case d:case l:this.handleLogicalStructure(s);break;case c:case p:case g:case m:this.handleFishbone(s);break;default:this.handleLogicalStructure(s)}}),this.overlapNode&&this.handleOverlapNode()}handleOverlapNode(){const{LOGICAL_STRUCTURE:e,LOGICAL_STRUCTURE_LEFT:t,MIND_MAP:i,ORGANIZATION_STRUCTURE:n,CATALOG_ORGANIZATION:o,TIMELINE:a,TIMELINE2:r,VERTICAL_TIMELINE:h,VERTICAL_TIMELINE2:d,VERTICAL_TIMELINE3:l,FISHBONE:c,FISHBONE2:p,RIGHT_FISHBONE:g,RIGHT_FISHBONE2:m}=s["a"].LAYOUT,{LEFT:f,TOP:u,RIGHT:L,BOTTOM:v}=s["a"].LAYOUT_GROW_DIR,N=this.overlapNode.layerIndex,M=this.overlapNode.children,T=this.mindMap.renderer.layout.getMarginX(N+1),E=this.mindMap.renderer.layout.getMarginY(N+1),O=this.placeholderWidth/2,C=this.placeholderHeight/2;let D="",x="",I="",b=!1,w=!1;if(M.length>0){const s=M[M.length-1],v=this.getNodeRect(s);switch(D=this.getNewChildNodeDir(s),this.mindMap.opt.layout){case e:case i:x=D===f?v.originRight-this.placeholderWidth:v.originLeft,I=v.originBottom+this.minOffset-C;break;case t:x=v.originRight-this.placeholderWidth,I=v.originBottom+this.minOffset-C;break;case n:b=!0,x=v.originRight+this.minOffset-C,I=v.originTop;break;case o:0===N?(b=!0,x=v.originRight+this.minOffset-C,I=v.originTop):(x=v.originLeft,I=v.originBottom+this.minOffset-C);break;case a:0===N?(b=!0,x=v.originRight+this.minOffset-C,I=v.originTop+v.originHeight/2-O):(x=v.originLeft,I=v.originBottom+this.minOffset-C);break;case r:0===N?(b=!0,x=v.originRight+this.minOffset-C,I=v.originTop+v.originHeight/2-O):(x=v.originLeft,I=1===N&&D===u?v.originTop-this.placeholderHeight-this.minOffset+C:v.originBottom+this.minOffset-C);break;case h:case d:case l:0===N?(x=v.originLeft+v.originWidth/2-O,I=v.originBottom+this.minOffset-C):(x=D===L?v.originLeft:v.originRight-this.placeholderWidth,I=v.originBottom+this.minOffset-C);break;case c:case p:case g:case m:N<=1?(w=!0,this.mindMap.execCommand("SET_NODE_ACTIVE",this.overlapNode,!0)):(x=v.originLeft,I=D===u?v.originBottom+this.minOffset-C:v.originTop-this.placeholderHeight-this.minOffset+C);break;default:}}else{const s=this.getNodeRect(this.overlapNode);switch(D=this.getNewChildNodeDir(this.overlapNode),this.mindMap.opt.layout){case e:case i:x=D===L?s.originRight+T:s.originLeft-this.placeholderWidth-T,I=s.originTop+(s.originHeight-this.placeholderHeight)/2;break;case t:x=s.originLeft-this.placeholderWidth-T,I=s.originTop+(s.originHeight-this.placeholderHeight)/2;break;case n:b=!0,x=s.originLeft+(s.originWidth-this.placeholderHeight)/2,I=s.originBottom+T;break;case o:0===N&&(b=!0),x=s.originLeft+.5*s.originWidth,I=s.originBottom+T;break;case a:0===N&&(b=!0),x=s.originLeft+.5*s.originWidth,I=s.originBottom+E;break;case r:0===N&&(b=!0),x=s.originLeft+.5*s.originWidth,I=1===N&&D===u?s.originTop-this.placeholderHeight-T:s.originBottom+T;break;case h:case d:case l:0===N&&(b=!0),x=D===L?s.originRight+T:s.originLeft-this.placeholderWidth-T,I=s.originTop+s.originHeight/2-C;break;case c:case p:case g:case m:N<=1?(w=!0,this.mindMap.execCommand("SET_NODE_ACTIVE",this.overlapNode,!0)):(x=s.originLeft+.5*s.originWidth,I=D===v?s.originTop-this.placeholderHeight-this.minOffset+C:s.originBottom+this.minOffset-C);break;default:}}w||this.setPlaceholderRect({x:x,y:I,dir:D,rotate:b})}getNewChildNodeDir(e){const{LOGICAL_STRUCTURE:t,LOGICAL_STRUCTURE_LEFT:i,MIND_MAP:n,TIMELINE2:o,VERTICAL_TIMELINE:a,VERTICAL_TIMELINE2:r,VERTICAL_TIMELINE3:h,FISHBONE:d,FISHBONE2:l,RIGHT_FISHBONE:c,RIGHT_FISHBONE2:p}=s["a"].LAYOUT;switch(this.mindMap.opt.layout){case t:return s["a"].LAYOUT_GROW_DIR.RIGHT;case i:return s["a"].LAYOUT_GROW_DIR.LEFT;case n:case o:case a:case r:case h:case d:case l:case c:case p:return e.dir;default:return""}}handleVerticalCheck(e,t,i=!1){const{layout:n}=this.mindMap.opt,{LAYOUT:o,LAYOUT_GROW_DIR:a}=s["a"],{VERTICAL_TIMELINE:r,VERTICAL_TIMELINE2:h,VERTICAL_TIMELINE3:d,FISHBONE:l,FISHBONE2:c,RIGHT_FISHBONE:p,RIGHT_FISHBONE2:g}=o,{LEFT:m}=a,f=this.mouseMoveX,u=this.mouseMoveY,L=this.getNodeRect(e),v=this.getNewChildNodeDir(e),N=e.layerIndex;i&&(t=t.reverse());let M=L.originHeight/4,{prevBrotherOffset:T,nextBrotherOffset:E}=this.getNodeDistanceToSiblingNode(t,e,L,"v");if(L.left<=f&&L.right>=f){if(!this.overlapNode&&!this.prevNode&&!this.nextNode&&!e.isRoot){let t=E>0?u>L.bottom&&u<=L.bottom+E:u>=L.bottom-M&&u<=L.bottom,o=T>0?u<L.top&&u>=L.top-T:u>=L.top&&u<=L.top+M;const{scaleY:s}=this.drawTransform;let a=v===m?L.originRight-this.placeholderWidth:L.originLeft,f=!1;switch(n){case r:case h:case d:1===N&&(a=L.originLeft+L.originWidth/2-this.placeholderWidth/2);break;case p:case g:a=L.originLeft+L.originWidth-this.placeholderWidth;break;default:}if(t){i?this.nextNode=e:this.prevNode=e;let t=L.originBottom+E/s-this.placeholderHeight/2;switch(n){case l:case c:case p:case g:2===N&&(f=!0,t=L.originBottom+this.minOffset-this.placeholderHeight/2);break;default:}this.setPlaceholderRect({x:a,y:t,dir:v,notRenderLine:f})}else if(o){i?this.prevNode=e:this.nextNode=e;let t=L.originTop-this.placeholderHeight-T/s+this.placeholderHeight/2;switch(n){case l:case c:case p:case g:2===N&&(f=!0,t=L.originTop-this.placeholderHeight-this.minOffset+this.placeholderHeight/2);break;default:}this.setPlaceholderRect({x:a,y:t,dir:v,notRenderLine:f})}}this.checkIsOverlap({node:e,dir:"v",prevBrotherOffset:T,nextBrotherOffset:E,size:M,pos:u,nodeRect:L})}}handleHorizontalCheck(e,t){const{layout:i}=this.mindMap.opt,{LAYOUT:n}=s["a"],{FISHBONE:o,FISHBONE2:a,RIGHT_FISHBONE:r,RIGHT_FISHBONE2:h,TIMELINE:d,TIMELINE2:l}=n;let c=this.mouseMoveX,p=this.mouseMoveY,g=this.getNodeRect(e),m=g.originWidth/4,{prevBrotherOffset:f,nextBrotherOffset:u}=this.getNodeDistanceToSiblingNode(t,e,g,"h");if(g.top<=p&&g.bottom>=p){if(!this.overlapNode&&!this.prevNode&&!this.nextNode&&!e.isRoot){let t=u>0?c<g.right+u&&c>=g.right:c<=g.right&&c>=g.right-m,n=f>0?c>g.left-f&&c<=g.left:c<=g.left+m&&c>=g.left;const{scaleX:s}=this.drawTransform,p=e.layerIndex;let L=g.originTop,v=!1;switch(i){case d:case l:L=g.originTop+g.originHeight/2-this.placeholderWidth/2;break;case o:case a:case r:case h:1===p&&(v=!0,L=g.originTop+g.originHeight/2-this.placeholderWidth/2);break;default:}t?([r,h].includes(i)?this.nextNode=e:this.prevNode=e,this.setPlaceholderRect({x:g.originRight+u/s-this.placeholderHeight/2,y:L,rotate:!0,notRenderLine:v})):n&&([r,h].includes(i)?this.prevNode=e:this.nextNode=e,this.setPlaceholderRect({x:g.originLeft-this.placeholderHeight-f/s+this.placeholderHeight/2,y:L,rotate:!0,notRenderLine:v}))}this.checkIsOverlap({node:e,dir:"h",prevBrotherOffset:f,nextBrotherOffset:u,size:m,pos:c,nodeRect:g})}}getNodeDistanceToSiblingNode(e,t,i,o){const{TOP:a,LEFT:r,BOTTOM:h,RIGHT:d}=s["a"].LAYOUT_GROW_DIR;let{scaleX:l,scaleY:c}=this.drawTransform,p="v"===o?a:r,g="v"===o?h:d,m="v"===o?c:l,f=this.minOffset*m,u=Object(n["H"])(t,e),L=null,v=null;-1!==u&&(u-1>=0&&(L=e[u-1]),u+1<=e.length-1&&(v=e[u+1]));let N=0;if(L){let e=this.getNodeRect(L);N=i[p]-e[g],N=N>=f?N/2:0}else N=f;let M=0;if(v){let e=this.getNodeRect(v);M=e[p]-i[g],M=M>=f?M/2:0}else M=f;return{prevBrother:L,prevBrotherOffset:N,nextBrother:v,nextBrotherOffset:M}}setPlaceholderRect({x:e,y:t,dir:i,rotate:n,notRenderLine:o}){let s=this.placeholderWidth,a=this.placeholderHeight;if(n){const e=s;s=a,a=e}if(this.placeholder.size(s,a).move(e,t),o)return;const{dragPlaceholderLineConfig:r}=this.mindMap.opt;let h=null,d=null;this.overlapNode?(h=this.overlapNode,d=this.overlapNode):(h=this.prevNode||this.nextNode,d=h.parent),d=d.fakeClone(),h=h.fakeClone();const l=this.beingDragNodeList[0].fakeClone();l.dir=i,l.left=e,l.top=t,l.width=s,l.height=a,d.children=[l],d._lines=[],this.placeHolderLine.show(),this.mindMap.renderer.layout.renderLine(d,[this.placeHolderLine],(...e)=>{},h.style.getStyle("lineStyle",!0)),this.placeHolderExtraLines=[...d._lines],this.placeHolderExtraLines.forEach(e=>{this.mindMap.otherDraw.add(e),e.stroke({color:r.color,width:r.width}).fill({color:"none"})})}checkIsOverlap({node:e,dir:t,prevBrotherOffset:i,nextBrotherOffset:n,size:o,pos:a,nodeRect:r}){const{TOP:h,LEFT:d,BOTTOM:l,RIGHT:c}=s["a"].LAYOUT_GROW_DIR;let p="v"===t?h:d,g="v"===t?l:c;this.overlapNode||this.prevNode||this.nextNode||r[p]+(i>0?0:o)<=a&&r[g]-(n>0?0:o)>=a&&(this.overlapNode=e)}handleLogicalStructure(e){const t=this.commonGetNodeCheckList(e);this.handleVerticalCheck(e,t)}handleMindMap(e){const t=e.parent?e.parent.children.filter(t=>{let i=!0;return 1===e.layerIndex&&(i=t.dir===e.dir),i&&!this.checkIsInBeingDragNodeList(t)}):[];this.handleVerticalCheck(e,t)}handleOrganizationStructure(e){const t=this.commonGetNodeCheckList(e);this.handleHorizontalCheck(e,t)}handleCatalogOrganization(e){const t=this.commonGetNodeCheckList(e);1===e.layerIndex?this.handleHorizontalCheck(e,t):this.handleVerticalCheck(e,t)}handleTimeLine(e){let t=this.commonGetNodeCheckList(e);1===e.layerIndex?this.handleHorizontalCheck(e,t):this.handleVerticalCheck(e,t)}handleTimeLine2(e){let t=this.commonGetNodeCheckList(e);1===e.layerIndex?this.handleHorizontalCheck(e,t):e.dir===s["a"].LAYOUT_GROW_DIR.TOP&&2===e.layerIndex?this.handleVerticalCheck(e,t,!0):this.handleVerticalCheck(e,t)}handleFishbone(e){let t=e.parent?e.parent.children.filter(e=>e.layerIndex>1&&!this.checkIsInBeingDragNodeList(e)):[];if(1===e.layerIndex)this.handleHorizontalCheck(e,t);else{const i=e.dir===s["a"].LAYOUT_GROW_DIR.TOP&&2===e.layerIndex,n=e.dir===s["a"].LAYOUT_GROW_DIR.BOTTOM&&e.layerIndex>=3;i||n?this.handleVerticalCheck(e,t,!0):this.handleVerticalCheck(e,t)}}commonGetNodeCheckList(e){return e.parent?[...e.parent.children].filter(e=>!this.checkIsInBeingDragNodeList(e)):[]}getNodeRect(e){let{scaleX:t,scaleY:i,translateX:n,translateY:o}=this.drawTransform,{left:s,top:a,width:r,height:h}=e,d=r,l=h,c=s,p=a,g=a+h,m=s+r,f=(s+r)*t+n,u=(a+h)*i+o;return s=s*t+n,a=a*i+o,{left:s,top:a,right:f,bottom:u,originWidth:d,originHeight:l,originLeft:c,originTop:p,originBottom:g,originRight:m}}checkIsInBeingDragNodeList(e){return!!this.beingDragNodeList.find(t=>t.uid===e.uid||t.isAncestor(e))}beforePluginRemove(){this.unBindEvent()}beforePluginDestroy(){this.unBindEvent()}}r.instanceName="drag",t["a"]=r},a7d3:function(e,t,i){"use strict";var n=i("d17d"),o=i("0370"),s=i("0bd5"),a=i("083c"),r=i("1135");const h=["associativeLineWidth","associativeLineColor","associativeLineActiveWidth","associativeLineActiveColor","associativeLineDasharray","associativeLineTextColor","associativeLineTextFontSize","associativeLineTextLineHeight","associativeLineTextFontFamily"],d="associative-line-text-edit-warp";class l{constructor(e={}){this.mindMap=e.mindMap,this.associativeLineDraw=this.mindMap.associativeLineDraw,this.isNotRenderAllLines=!1,this.lineList=[],this.activeLine=null,this.isCreatingLine=!1,this.creatingStartNode=null,this.creatingLine=null,this.overlapNode=null,this.isNodeDragging=!1,this.controlLine1=null,this.controlLine2=null,this.controlPoint1=null,this.controlPoint2=null,this.controlPointDiameter=10,this.isControlPointMousedown=!1,this.mousedownControlPointKey="",this.controlPointMousemoveState={pos:null,startPoint:null,endPoint:null,targetIndex:""},this.checkOverlapNode=Object(n["wb"])(this.checkOverlapNode,100,this),Object.keys(a["a"]).forEach(e=>{this[e]=a["a"][e].bind(this)}),this.showTextEdit=!1,Object.keys(r["a"]).forEach(e=>{this[e]=r["a"][e].bind(this)}),this.mindMap.addEditNodeClass(d),this.bindEvent()}bindEvent(){this.renderAllLines=this.renderAllLines.bind(this),this.onDrawClick=this.onDrawClick.bind(this),this.onNodeClick=this.onNodeClick.bind(this),this.removeLine=this.removeLine.bind(this),this.addLine=this.addLine.bind(this),this.onMousemove=this.onMousemove.bind(this),this.onNodeDragging=this.onNodeDragging.bind(this),this.onNodeDragend=this.onNodeDragend.bind(this),this.onControlPointMouseup=this.onControlPointMouseup.bind(this),this.onBeforeDestroy=this.onBeforeDestroy.bind(this),this.mindMap.on("node_tree_render_end",this.renderAllLines),this.mindMap.on("data_change",this.renderAllLines),this.mindMap.on("draw_click",this.onDrawClick),this.mindMap.on("node_click",this.onNodeClick),this.mindMap.on("contextmenu",this.onDrawClick),this.mindMap.keyCommand.addShortcut("Del|Backspace",this.removeLine),this.mindMap.command.add("ADD_ASSOCIATIVE_LINE",this.addLine),this.mindMap.on("mousemove",this.onMousemove),this.mindMap.on("node_dragging",this.onNodeDragging),this.mindMap.on("node_dragend",this.onNodeDragend),this.mindMap.on("mouseup",this.onControlPointMouseup),this.mindMap.on("scale",this.onScale),this.mindMap.on("beforeDestroy",this.onBeforeDestroy)}unBindEvent(){this.mindMap.off("node_tree_render_end",this.renderAllLines),this.mindMap.off("data_change",this.renderAllLines),this.mindMap.off("draw_click",this.onDrawClick),this.mindMap.off("node_click",this.onNodeClick),this.mindMap.off("contextmenu",this.onDrawClick),this.mindMap.keyCommand.removeShortcut("Del|Backspace",this.removeLine),this.mindMap.command.remove("ADD_ASSOCIATIVE_LINE",this.addLine),this.mindMap.off("mousemove",this.onMousemove),this.mindMap.off("node_dragging",this.onNodeDragging),this.mindMap.off("node_dragend",this.onNodeDragend),this.mindMap.off("mouseup",this.onControlPointMouseup),this.mindMap.off("scale",this.onScale),this.mindMap.off("beforeDestroy",this.onBeforeDestroy)}getStyleConfig(e,t){let i={};if(t){const n=e.getData("associativeLineStyle")||{};i=n[t.getData("uid")]||{}}const n={};return h.forEach(t=>{"undefined"!==typeof i[t]?n[t]=i[t]:n[t]=e.getStyle(t)}),n}onBeforeDestroy(){this.hideEditTextBox(),this.removeTextEditEl()}onDrawClick(){this.isCreatingLine&&this.cancelCreateLine(),this.isControlPointMousedown||(this.clearActiveLine(),this.renderAllLines())}onNodeClick(e){this.isCreatingLine?this.completeCreateLine(e):(this.clearActiveLine(),this.renderAllLines())}createMarker(e=(()=>{})){return this.associativeLineDraw.marker(20,20,t=>{t.ref(12,5),t.size(10,10),t.attr("orient","auto-start-reverse"),e(t.path("M0,0 L2,5 L0,10 L10,5 Z"))})}updateAllLinesPos(e,t,i){i=i||{};let[n,o]=Object(s["b"])(e,t),a=0,r="",h=0,d="";return i.startPoint&&(a=i.startPoint.range||0,r=i.startPoint.dir||"right",n=Object(s["g"])(e,r,a)),i.endPoint&&(h=i.endPoint.range||0,d=i.endPoint.dir||"right",o=Object(s["g"])(t,d,h)),[n,o]}renderAllLines(){if(this.isNotRenderAllLines)return void(this.isNotRenderAllLines=!1);this.removeAllLines(),this.removeControls(),this.clearActiveLine();let e=this.mindMap.renderer.root;if(!e)return;let t=new Map,i=new Map;Object(n["yb"])(e,null,e=>{if(!e)return;let n=e.getData();n.associativeLineTargets&&n.associativeLineTargets.length>0&&i.set(e,n.associativeLineTargets),n.uid&&t.set(n.uid,e)},()=>{},!0,0),i.forEach((e,i)=>{e.forEach((e,n)=>{let o=t.get(e);if(!i||!o)return;const s=(i.getData("associativeLinePoint")||[])[n],[a,r]=this.updateAllLinesPos(i,o,s);this.drawLine(a,r,i,o)})})}drawLine(e,t,i,n){let{associativeLineWidth:o,associativeLineColor:a,associativeLineActiveWidth:r,associativeLineDasharray:h}=this.getStyleConfig(i,n),d=null;const l=this.createMarker(e=>{d=e});d.stroke({color:a}).fill({color:a});let{path:c,controlPoints:p}=Object(s["f"])(e,t,i,n),g=this.associativeLineDraw.path();g.stroke({width:o,color:a,dasharray:h||"6,4"}).fill({color:"none"}),g.plot(c),g.marker("end",l);let m=this.associativeLineDraw.path();m.stroke({width:r,color:"transparent"}).fill({color:"none"}),m.plot(c);let f=this.createText({path:g,clickPath:m,markerPath:d,node:i,toNode:n,startPoint:e,endPoint:t,controlPoints:p});m.click(o=>{o.stopPropagation(),this.setActiveLine({path:g,clickPath:m,markerPath:d,text:f,node:i,toNode:n,startPoint:e,endPoint:t,controlPoints:p})}),m.dblclick(()=>{this.activeLine&&this.showEditTextBox(f)}),this.renderText(this.getText(i,n),g,f,i,n),this.lineList.push([g,m,f,i,n])}updateActiveLineStyle(){if(!this.activeLine)return;this.isNotRenderAllLines=!0;const[e,t,i,n,o,s]=this.activeLine,{associativeLineWidth:a,associativeLineColor:r,associativeLineDasharray:h,associativeLineActiveWidth:d,associativeLineActiveColor:l,associativeLineTextColor:c,associativeLineTextFontFamily:p,associativeLineTextFontSize:g}=this.getStyleConfig(n,o);e.stroke({width:a,color:r,dasharray:h||"6,4"}).fill({color:"none"}),t.stroke({width:d,color:l}).fill({color:"none"}),s.stroke({color:r}).fill({color:r}),i.find("text").forEach(e=>{e.fill({color:c}).css({"font-family":p,"font-size":g+"px"})}),this.controlLine1&&this.controlLine1.stroke({color:l}),this.controlLine2&&this.controlLine2.stroke({color:l}),this.controlPoint1&&this.controlPoint1.stroke({color:l}),this.controlPoint2&&this.controlPoint2.stroke({color:l}),this.updateTextPos(e,i)}setActiveLine({path:e,clickPath:t,markerPath:i,text:n,node:o,toNode:s,startPoint:a,endPoint:r,controlPoints:h}){let{associativeLineActiveColor:d}=this.getStyleConfig(o,s);this.mindMap.execCommand("CLEAR_ACTIVE_NODE"),this.clearActiveLine(),this.activeLine=[e,t,n,o,s,i],t.stroke({color:d}),this.getText(o,s)||this.renderText(this.mindMap.opt.defaultAssociativeLineText,e,n,o,s),this.renderControls(a,r,h[0],h[1],o,s),this.mindMap.emit("associative_line_click",e,t,o,s),this.front()}removeAllLines(){this.lineList.forEach(e=>{e[0].remove(),e[1].remove(),e[2].remove()}),this.lineList=[]}createLineFromActiveNode(){if(this.mindMap.renderer.activeNodeList.length<=0)return;let e=this.mindMap.renderer.activeNodeList[0];this.createLine(e)}createLine(e){let{associativeLineWidth:t,associativeLineColor:i,associativeLineDasharray:n}=this.getStyleConfig(e);if(this.isCreatingLine||!e)return;this.front(),this.isCreatingLine=!0,this.creatingStartNode=e,this.creatingLine=this.associativeLineDraw.path(),this.creatingLine.stroke({width:t,color:i,dasharray:n||"6,4"}).fill({color:"none"});let o=null;const s=this.createMarker(e=>{o=e});o.stroke({color:i}).fill({color:i}),this.creatingLine.marker("end",s)}cancelCreateLine(){this.isCreatingLine=!1,this.creatingStartNode=null,this.creatingLine.remove(),this.creatingLine=null,this.overlapNode=null,this.back()}onMousemove(e){this.onControlPointMousemove(e),this.updateCreatingLine(e)}updateCreatingLine(e){if(!this.isCreatingLine)return;let{x:t,y:i}=this.getTransformedEventPos(e),n=Object(s["g"])(this.creatingStartNode),o=t>n.x?-10:10,a=Object(s["c"])(n.x,n.y,t+o,i);this.creatingLine.plot(a),this.checkOverlapNode(t,i)}getTransformedEventPos(e){let{x:t,y:i}=this.mindMap.toPos(e.clientX,e.clientY),{scaleX:n,scaleY:o,translateX:s,translateY:a}=this.mindMap.draw.transform();return{x:(t-s)/n,y:(i-a)/o}}getNodePos(e){const{scaleX:t,scaleY:i,translateX:n,translateY:o}=this.mindMap.draw.transform(),{left:s,top:a,width:r,height:h}=e;let d=s*t+n,l=a*i+o;return{left:s,top:a,translateLeft:d,translateTop:l,width:r,height:h}}checkOverlapNode(e,t){this.overlapNode=null,Object(n["d"])(this.mindMap.renderer.root,i=>{if(i.getData("isActive")&&this.mindMap.execCommand("SET_NODE_ACTIVE",i,!1),i.uid===this.creatingStartNode.uid||this.overlapNode)return;let{left:n,top:o,width:s,height:a}=i,r=n+s,h=o+a;e>=n&&e<=r&&t>=o&&t<=h&&(this.overlapNode=i)}),this.overlapNode&&!this.overlapNode.getData("isActive")&&this.mindMap.execCommand("SET_NODE_ACTIVE",this.overlapNode,!0)}completeCreateLine(e){if(this.creatingStartNode.uid===e.uid)return;const{beforeAssociativeLineConnection:t}=this.mindMap.opt;let i=!1;"function"===typeof t&&(i=t(e)),i||(this.addLine(this.creatingStartNode,e),this.overlapNode&&this.overlapNode.getData("isActive")&&this.mindMap.execCommand("SET_NODE_ACTIVE",this.overlapNode,!1),this.cancelCreateLine())}addLine(e,t){if(!e||!t)return;let i=t.getData("uid");i||(i=Object(o["a"])(),this.mindMap.execCommand("SET_NODE_DATA",t,{uid:i}));let n=e.getData("associativeLineTargets")||[];const a=n.some(e=>e===i);if(a)return;n.push(i);let[r,h]=Object(s["b"])(e,t),d=Object(s["a"])(r.x,r.y,h.x,h.y);const{associativeLineInitPointsPosition:l}=this.mindMap.opt;if(l){const{from:e,to:t}=l;e&&(r.dir=e),t&&(h.dir=t)}let c=e.getData("associativeLineTargetControlOffsets")||[];c[n.length-1]=[{x:d[0].x-r.x,y:d[0].y-r.y},{x:d[1].x-h.x,y:d[1].y-h.y}];let p=e.getData("associativeLinePoint")||[];p[n.length-1]={startPoint:r,endPoint:h},this.mindMap.execCommand("SET_NODE_DATA",e,{associativeLineTargets:n,associativeLineTargetControlOffsets:c,associativeLinePoint:p})}removeLine(){if(!this.activeLine)return;let[,,,e,t]=this.activeLine;this.removeControls();let{associativeLineTargets:i,associativeLinePoint:n,associativeLineTargetControlOffsets:o,associativeLineText:a,associativeLineStyle:r}=e.getData();n=n||[];let h=Object(s["d"])(e,t),d={};a&&Object.keys(a).forEach(e=>{e!==t.getData("uid")&&(d[e]=a[e])});let l={};r&&Object.keys(r).forEach(e=>{e!==t.getData("uid")&&(l[e]=r[e])}),this.mindMap.execCommand("SET_NODE_DATA",e,{associativeLineTargets:i.filter((e,t)=>t!==h),associativeLinePoint:n.filter((e,t)=>t!==h),associativeLineTargetControlOffsets:o?o.filter((e,t)=>t!==h):[],associativeLineText:d,associativeLineStyle:l})}clearActiveLine(){if(this.activeLine){let[,e,t,i,n]=this.activeLine;e.stroke({color:"transparent"}),this.hideEditTextBox(),this.getText(i,n)||t.clear(),this.activeLine=null,this.removeControls(),this.back(),this.mindMap.emit("associative_line_deactivate")}}onNodeDragging(){this.isNodeDragging||(this.isNodeDragging=!0,this.lineList.forEach(e=>{e[0].hide(),e[1].hide(),e[2].hide()}),this.hideControls())}onNodeDragend(){this.isNodeDragging&&(this.lineList.forEach(e=>{e[0].show(),e[1].show(),e[2].show()}),this.showControls(),this.isNodeDragging=!1)}front(){this.mindMap.opt.associativeLineIsAlwaysAboveNode||this.associativeLineDraw.front()}back(){this.mindMap.opt.associativeLineIsAlwaysAboveNode||(this.associativeLineDraw.back(),this.associativeLineDraw.forward())}beforePluginRemove(){this.mindMap.deleteEditNodeClass(d),this.unBindEvent()}beforePluginDestroy(){this.mindMap.deleteEditNodeClass(d),this.unBindEvent()}}l.instanceName="associativeLine",t["a"]=l},ef20:function(e,t,i){"use strict";var n=i("d17d"),o=i("5f3a");const s={boxShadowColor:"rgba(0, 0, 0, 0.8)",borderRadius:"5px",transition:"all 0.3s ease-out",zIndex:9999,padding:20,margin:50,openBlankMode:!0};class a{constructor(e){this.mindMap=e.mindMap,this.isInDemonstrate=!1,this.stepList=[],this.currentStepIndex=0,this.currentStepNode=null,this.currentUnderlineTextData=null,this.tmpStyleEl=null,this.highlightEl=null,this.transformState=null,this.renderTree=null,this.config=Object.assign({...s},this.mindMap.opt.demonstrateConfig||{}),this.needRestorePerformanceMode=!1}enter(){this.bindFullscreenEvent(),document.fullscreenElement===this.mindMap.el?this._enter():Object(n["A"])(this.mindMap.el)}_enter(){this.isInDemonstrate=!0,this.pausePerformanceMode(),this.addTmpStyles(),this.transformState=this.mindMap.view.getTransformData(),this.renderTree=this.mindMap.getData(),this.mindMap.command.pause(),this.mindMap.keyCommand.pause(),this.createHighlightEl(),this.getStepList();let e=!1;this.mindMap.renderer.isRendering&&(e=!0),this.mindMap.execCommand("UNEXPAND_ALL",!1);const t=()=>{e?e=!1:(this.mindMap.off("node_tree_render_end",t),this.jump(this.currentStepIndex),this.bindEvent())};this.mindMap.on("node_tree_render_end",t)}exit(){Object(n["w"])(this.mindMap.el),this.mindMap.updateData(this.renderTree),this.mindMap.view.setTransformData(this.transformState),this.renderTree=null,this.transformState=null,this.stepList=[],this.currentStepIndex=0,this.currentStepNode=null,this.currentUnderlineTextData=null,this.unBindEvent(),this.removeTmpStyles(),this.removeHighlightEl(),this.mindMap.command.recovery(),this.mindMap.keyCommand.recovery(),this.restorePerformanceMode(),this.mindMap.emit("exit_demonstrate"),this.isInDemonstrate=!1}pausePerformanceMode(){const{openPerformance:e}=this.mindMap.opt;e&&(this.needRestorePerformanceMode=!0,this.mindMap.opt.openPerformance=!1,this.mindMap.renderer.forceLoadNode())}restorePerformanceMode(){this.needRestorePerformanceMode&&(this.mindMap.opt.openPerformance=!0,this.mindMap.renderer.forceLoadNode())}addTmpStyles(){this.tmpStyleEl=document.createElement("style");let e="\n      /* 画布所有元素禁止响应鼠标事件 */\n      .smm-mind-map-container {\n        pointer-events: none;\n      }\n      /* 超链接图标允许响应鼠标事件 */\n      .smm-node a {\n        pointer-events: all;\n      }\n      /* 备注图标允许响应鼠标事件 */\n      .smm-node .smm-node-note {\n        pointer-events: all;\n      }\n    ";this.config.openBlankMode&&(e+="\n        /* 带下划线的文本内容全部隐藏 */\n        .smm-richtext-node-wrap u {\n          opacity: 0;\n        }\n      "),this.tmpStyleEl.innerText=e,document.head.appendChild(this.tmpStyleEl)}removeTmpStyles(){this.tmpStyleEl&&document.head.removeChild(this.tmpStyleEl)}createHighlightEl(){this.highlightEl||(this.highlightEl=document.createElement("div"),this.highlightEl.style.cssText=`\n            position: absolute;\n            box-shadow: 0 0 0 5000px ${this.config.boxShadowColor};\n            border-radius: ${this.config.borderRadius};\n            transition: ${this.config.transition};\n            z-index: ${this.config.zIndex+1};\n            pointer-events: none;\n        `,this.mindMap.el.appendChild(this.highlightEl))}removeHighlightEl(){this.highlightEl&&(this.mindMap.el.removeChild(this.highlightEl),this.highlightEl=null)}updateHighlightEl({left:e,top:t,width:i,height:n}){const o=this.config.padding;e&&(this.highlightEl.style.left=e-o+"px"),t&&(this.highlightEl.style.top=t-o+"px"),i&&(this.highlightEl.style.width=i+2*o+"px"),n&&(this.highlightEl.style.height=n+2*o+"px")}bindEvent(){this.onKeydown=this.onKeydown.bind(this),window.addEventListener("keydown",this.onKeydown)}bindFullscreenEvent(){this.onFullscreenChange=this.onFullscreenChange.bind(this),document.addEventListener(n["B"],this.onFullscreenChange)}unBindEvent(){window.removeEventListener("keydown",this.onKeydown),document.removeEventListener(n["B"],this.onFullscreenChange)}onFullscreenChange(){document.fullscreenElement?document.fullscreenElement===this.mindMap.el&&this._enter():this.exit()}onKeydown(e){e.keyCode===o["a"].Left?this.prev():e.keyCode===o["a"].Right?this.next():e.keyCode===o["a"].Esc?this.exit():e.keyCode===o["a"].Enter&&this.showNextUnderlineText()}prev(){this.currentStepIndex>0&&this.jump(this.currentStepIndex-1)}next(){const e=this.stepList.length;this.currentStepIndex<e-1&&this.jump(this.currentStepIndex+1)}showNextUnderlineText(){if(!this.config.openBlankMode||!this.currentStepNode||!this.currentUnderlineTextData)return;const{index:e,list:t,length:i}=this.currentUnderlineTextData;if(e>=i)return;const n=t[e];this.currentUnderlineTextData.index++,n.node.style.opacity=1}jump(e){this.currentUnderlineTextData&&(this.currentUnderlineTextData.list.forEach(e=>{e.node.style.opacity=""}),this.currentUnderlineTextData=null),this.currentStepNode=null,this.currentStepIndex=e,this.mindMap.emit("demonstrate_jump",this.currentStepIndex,this.stepList.length);const t=this.stepList[e],i=t.node,o=i.data.uid,s=this.mindMap.renderer.findNodeByUid(o);if(s)if("node"===t.type){this.currentStepNode=s;const e=this.config.openBlankMode?s.group.find("u"):null;e&&e.length>0&&(this.currentUnderlineTextData={index:0,list:e,length:e.length}),this.mindMap.view.fit(()=>s.group.rbox(),!0,this.config.padding+this.config.margin);const t=s.group.rbox();this.updateHighlightEl({left:t.x,top:t.y,width:t.width,height:t.height})}else{const e=()=>{i.children.forEach(e=>{e.data.expand=!1}),this.mindMap.render(()=>{this.mindMap.view.fit(()=>{const e=Object(n["K"])(s,0,0,0,0,!0);return{...e,x:e.left,y:e.top}},!0,this.config.padding+this.config.margin);const e=Object(n["K"])(s,0,0,0,0,!0);this.updateHighlightEl(e)})};if(i.data.expand)e();else{this.mindMap.execCommand("SET_NODE_EXPAND",s,!0);const t=()=>{this.mindMap.off("node_tree_render_end",t),e()};this.mindMap.on("node_tree_render_end",t)}}else this.mindMap.renderer.expandToNodeUid(o,()=>{const t=this.mindMap.renderer.findNodeByUid(o);t&&this.jump(e)})}getStepList(){Object(n["yb"])(this.mindMap.renderer.renderTree,null,e=>{this.stepList.push({type:"node",node:e});const t=Object(n["z"])(e.data);t.forEach(e=>{e.uid&&this.stepList.push({type:"node",node:{data:e}})}),e.children.length>1&&this.stepList.push({type:"children",node:e})})}beforePluginRemove(){this.unBindEvent()}beforePluginDestroy(){this.unBindEvent()}}a.instanceName="demonstrate",t["a"]=a}}]);